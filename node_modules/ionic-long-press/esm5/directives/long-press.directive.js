import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';
import * as Hammer from 'hammerjs';
// const LONG_PRESS_DEFAULT_TIMEOUT = 500;
// const MIN_LONG_PRESS_TIMEOUT = 40;
var LongPressDirective = /** @class */ (function () {
    function LongPressDirective(zone, el) {
        this.zone = zone;
        this.pressed = new EventEmitter();
        this.longPressed = new EventEmitter();
        this.pressEnded = new EventEmitter();
        this.el = el.nativeElement;
    }
    LongPressDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.interval)
            this.interval = 500;
        if (this.interval < 40) {
            throw new Error("A limit of 40ms is imposed so you don't destroy device performance. If you need less than a 40ms interval, please file an issue explaining your use case.");
        }
        this._hammer = new Hammer.Manager(this.el, {
            recognizers: [[Hammer.Pan, { direction: Hammer.DIRECTION_VERTICAL }], [Hammer.Press], [Hammer.Tap]],
        });
        this._hammer.on('pan', function (e) {
            _this.onPressEnd();
        });
        this._hammer.on('press', function (e) {
            _this.pressed.emit(e);
            _this.clearInt();
            _this.int = setInterval(function () {
                _this.longPressed.emit();
            }, _this.interval);
        });
        this._hammer.on('pressup', function (e) {
            _this.onPressEnd();
        });
        this._hammer.on('release', function (e) {
            _this.onPressEnd();
        });
        this.el.addEventListener('mouseleave', function (e) {
            _this.onPressEnd();
        });
        this.el.addEventListener('mouseout', function (e) {
            _this.onPressEnd();
        });
    };
    LongPressDirective.prototype.clearInt = function () {
        if (this.int !== undefined) {
            clearInterval(this.int);
            this.int = undefined;
        }
    };
    LongPressDirective.prototype.onPressEnd = function () {
        this.clearInt();
        this.pressEnded.emit();
    };
    LongPressDirective.prototype.ngOnDestroy = function () {
        this.onPressEnd();
        if (this._hammer) {
            this._hammer.destroy();
            this._hammer = null;
        }
    };
    LongPressDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        Input()
    ], LongPressDirective.prototype, "interval", void 0);
    tslib_1.__decorate([
        Output()
    ], LongPressDirective.prototype, "pressed", void 0);
    tslib_1.__decorate([
        Output()
    ], LongPressDirective.prototype, "longPressed", void 0);
    tslib_1.__decorate([
        Output()
    ], LongPressDirective.prototype, "pressEnded", void 0);
    LongPressDirective = tslib_1.__decorate([
        Directive({
            selector: '[ion-long-press]',
        })
    ], LongPressDirective);
    return LongPressDirective;
}());
export { LongPressDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9uZy1wcmVzcy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pb25pYy1sb25nLXByZXNzLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9sb25nLXByZXNzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDN0csT0FBTyxLQUFLLE1BQU0sTUFBTSxVQUFVLENBQUE7QUFFbEMsMENBQTBDO0FBRTFDLHFDQUFxQztBQUtyQztJQVdFLDRCQUFtQixJQUFZLEVBQUUsRUFBYztRQUE1QixTQUFJLEdBQUosSUFBSSxDQUFRO1FBUnJCLFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQTtRQUMvQyxnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFBO1FBQ25ELGVBQVUsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQTtRQU8xRCxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUE7SUFDNUIsQ0FBQztJQUVELHFDQUFRLEdBQVI7UUFBQSxpQkF1Q0M7UUF0Q0MsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUE7UUFDdkMsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUNiLDJKQUEySixDQUM1SixDQUFBO1NBQ0Y7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ3pDLFdBQVcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BHLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxVQUFDLENBQU07WUFDNUIsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBQ25CLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUMsQ0FBTTtZQUM5QixLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNwQixLQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7WUFDZixLQUFJLENBQUMsR0FBRyxHQUFHLFdBQVcsQ0FBQztnQkFDckIsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtZQUN6QixDQUFDLEVBQUUsS0FBSSxDQUFDLFFBQVEsQ0FBUSxDQUFBO1FBQzFCLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQUMsQ0FBTTtZQUNoQyxLQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7UUFDbkIsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBQyxDQUFNO1lBQ2hDLEtBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUNuQixDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLFVBQUMsQ0FBTTtZQUM1QyxLQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7UUFDbkIsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxVQUFDLENBQU07WUFDMUMsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBQ25CLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELHFDQUFRLEdBQVI7UUFDRSxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssU0FBUyxFQUFFO1lBQzFCLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUE7U0FDckI7SUFDSCxDQUFDO0lBRUQsdUNBQVUsR0FBVjtRQUNFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDeEIsQ0FBQztJQUVELHdDQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7UUFDakIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7WUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7U0FDcEI7SUFDSCxDQUFDOztnQkEvRHdCLE1BQU07Z0JBQU0sVUFBVTs7SUFWdEM7UUFBUixLQUFLLEVBQUU7d0RBQWlCO0lBRWY7UUFBVCxNQUFNLEVBQUU7dURBQWdEO0lBQy9DO1FBQVQsTUFBTSxFQUFFOzJEQUFvRDtJQUNuRDtRQUFULE1BQU0sRUFBRTswREFBbUQ7SUFMakQsa0JBQWtCO1FBSDlCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxrQkFBa0I7U0FDN0IsQ0FBQztPQUNXLGtCQUFrQixDQTJFOUI7SUFBRCx5QkFBQztDQUFBLEFBM0VELElBMkVDO1NBM0VZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgTmdab25lLCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcbmltcG9ydCAqIGFzIEhhbW1lciBmcm9tICdoYW1tZXJqcydcblxuLy8gY29uc3QgTE9OR19QUkVTU19ERUZBVUxUX1RJTUVPVVQgPSA1MDA7XG5cbi8vIGNvbnN0IE1JTl9MT05HX1BSRVNTX1RJTUVPVVQgPSA0MDtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2lvbi1sb25nLXByZXNzXScsXG59KVxuZXhwb3J0IGNsYXNzIExvbmdQcmVzc0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgaW50ZXJ2YWw6IG51bWJlclxuXG4gIEBPdXRwdXQoKSBwcmVzc2VkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuICBAT3V0cHV0KCkgbG9uZ1ByZXNzZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpXG4gIEBPdXRwdXQoKSBwcmVzc0VuZGVkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgZWw6IEhUTUxFbGVtZW50XG4gIHByaXZhdGUgX2hhbW1lcjogSGFtbWVyTWFuYWdlclxuICBwcml2YXRlIGludDogbnVtYmVyXG5cbiAgY29uc3RydWN0b3IocHVibGljIHpvbmU6IE5nWm9uZSwgZWw6IEVsZW1lbnRSZWYpIHtcbiAgICB0aGlzLmVsID0gZWwubmF0aXZlRWxlbWVudFxuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmludGVydmFsKSB0aGlzLmludGVydmFsID0gNTAwXG4gICAgaWYgKHRoaXMuaW50ZXJ2YWwgPCA0MCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkEgbGltaXQgb2YgNDBtcyBpcyBpbXBvc2VkIHNvIHlvdSBkb24ndCBkZXN0cm95IGRldmljZSBwZXJmb3JtYW5jZS4gSWYgeW91IG5lZWQgbGVzcyB0aGFuIGEgNDBtcyBpbnRlcnZhbCwgcGxlYXNlIGZpbGUgYW4gaXNzdWUgZXhwbGFpbmluZyB5b3VyIHVzZSBjYXNlLlwiXG4gICAgICApXG4gICAgfVxuXG4gICAgdGhpcy5faGFtbWVyID0gbmV3IEhhbW1lci5NYW5hZ2VyKHRoaXMuZWwsIHtcbiAgICAgIHJlY29nbml6ZXJzOiBbW0hhbW1lci5QYW4sIHsgZGlyZWN0aW9uOiBIYW1tZXIuRElSRUNUSU9OX1ZFUlRJQ0FMIH1dLCBbSGFtbWVyLlByZXNzXSwgW0hhbW1lci5UYXBdXSxcbiAgICB9KVxuXG4gICAgdGhpcy5faGFtbWVyLm9uKCdwYW4nLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLm9uUHJlc3NFbmQoKVxuICAgIH0pXG5cbiAgICB0aGlzLl9oYW1tZXIub24oJ3ByZXNzJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy5wcmVzc2VkLmVtaXQoZSlcbiAgICAgIHRoaXMuY2xlYXJJbnQoKVxuICAgICAgdGhpcy5pbnQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIHRoaXMubG9uZ1ByZXNzZWQuZW1pdCgpXG4gICAgICB9LCB0aGlzLmludGVydmFsKSBhcyBhbnlcbiAgICB9KVxuXG4gICAgdGhpcy5faGFtbWVyLm9uKCdwcmVzc3VwJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy5vblByZXNzRW5kKClcbiAgICB9KVxuXG4gICAgdGhpcy5faGFtbWVyLm9uKCdyZWxlYXNlJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy5vblByZXNzRW5kKClcbiAgICB9KVxuXG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy5vblByZXNzRW5kKClcbiAgICB9KVxuXG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIChlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMub25QcmVzc0VuZCgpXG4gICAgfSlcbiAgfVxuXG4gIGNsZWFySW50KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmludCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuaW50KVxuICAgICAgdGhpcy5pbnQgPSB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICBvblByZXNzRW5kKCk6IHZvaWQge1xuICAgIHRoaXMuY2xlYXJJbnQoKVxuICAgIHRoaXMucHJlc3NFbmRlZC5lbWl0KClcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMub25QcmVzc0VuZCgpXG4gICAgaWYgKHRoaXMuX2hhbW1lcikge1xuICAgICAgdGhpcy5faGFtbWVyLmRlc3Ryb3koKVxuICAgICAgdGhpcy5faGFtbWVyID0gbnVsbFxuICAgIH1cbiAgfVxufVxuIl19