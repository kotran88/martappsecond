import { __decorate } from 'tslib';
import { EventEmitter, NgZone, ElementRef, Input, Output, Directive, NgModule } from '@angular/core';
import { Manager, Pan, DIRECTION_VERTICAL, Press, Tap } from 'hammerjs';
import { CommonModule } from '@angular/common';

// const LONG_PRESS_DEFAULT_TIMEOUT = 500;
// const MIN_LONG_PRESS_TIMEOUT = 40;
var LongPressDirective = /** @class */ (function () {
    function LongPressDirective(zone, el) {
        this.zone = zone;
        this.pressed = new EventEmitter();
        this.longPressed = new EventEmitter();
        this.pressEnded = new EventEmitter();
        this.el = el.nativeElement;
    }
    LongPressDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.interval)
            this.interval = 500;
        if (this.interval < 40) {
            throw new Error("A limit of 40ms is imposed so you don't destroy device performance. If you need less than a 40ms interval, please file an issue explaining your use case.");
        }
        this._hammer = new Manager(this.el, {
            recognizers: [[Pan, { direction: DIRECTION_VERTICAL }], [Press], [Tap]],
        });
        this._hammer.on('pan', function (e) {
            _this.onPressEnd();
        });
        this._hammer.on('press', function (e) {
            _this.pressed.emit(e);
            _this.clearInt();
            _this.int = setInterval(function () {
                _this.longPressed.emit();
            }, _this.interval);
        });
        this._hammer.on('pressup', function (e) {
            _this.onPressEnd();
        });
        this._hammer.on('release', function (e) {
            _this.onPressEnd();
        });
        this.el.addEventListener('mouseleave', function (e) {
            _this.onPressEnd();
        });
        this.el.addEventListener('mouseout', function (e) {
            _this.onPressEnd();
        });
    };
    LongPressDirective.prototype.clearInt = function () {
        if (this.int !== undefined) {
            clearInterval(this.int);
            this.int = undefined;
        }
    };
    LongPressDirective.prototype.onPressEnd = function () {
        this.clearInt();
        this.pressEnded.emit();
    };
    LongPressDirective.prototype.ngOnDestroy = function () {
        this.onPressEnd();
        if (this._hammer) {
            this._hammer.destroy();
            this._hammer = null;
        }
    };
    LongPressDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], LongPressDirective.prototype, "interval", void 0);
    __decorate([
        Output()
    ], LongPressDirective.prototype, "pressed", void 0);
    __decorate([
        Output()
    ], LongPressDirective.prototype, "longPressed", void 0);
    __decorate([
        Output()
    ], LongPressDirective.prototype, "pressEnded", void 0);
    LongPressDirective = __decorate([
        Directive({
            selector: '[ion-long-press]',
        })
    ], LongPressDirective);
    return LongPressDirective;
}());

var LongPressModule = /** @class */ (function () {
    function LongPressModule() {
    }
    LongPressModule = __decorate([
        NgModule({
            imports: [CommonModule],
            declarations: [LongPressDirective],
            exports: [LongPressDirective],
        })
    ], LongPressModule);
    return LongPressModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { LongPressDirective, LongPressModule };
//# sourceMappingURL=ionic-long-press.js.map
