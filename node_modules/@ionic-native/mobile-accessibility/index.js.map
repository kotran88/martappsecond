{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/mobile-accessibility/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Injectable } from '@angular/core';\n\n/**\n * @name Mobile Accessibility\n * @description\n * This plugin exposes information on the status of various accessibility features of mobile operating systems, including, for example, whether a screen reader is running, invert colors is enabled, and the preferred scaling for text.\n * It also allows an application to send a string to be spoken by the screen reader, or a command to stop the screen reader from speaking.\n *\n * @usage\n * ```typescript\n * import { MobileAccessibility } from '@ionic-native/mobile-accessibility';\n *\n *\n * constructor(private mobileAccessibility: MobileAccessibility) { }\n *\n * ...\n *\n * if(this.mobileAccessibility.isScreenReaderRunningCallback();\n *\n * ```\n */\n@Plugin({\n  pluginName: 'MobileAccessibility',\n  plugin: 'phonegap-plugin-mobile-accessibility',\n  pluginRef: 'window.MobileAccessibility',\n  repo: 'https://github.com/phonegap/phonegap-mobile-accessibility',\n  platforms: ['Android Fire OS', 'Android', 'iOS', 'Windows']\n})\n@Injectable()\nexport class MobileAccessibility extends IonicNativePlugin {\n\n  MobileAccessibilityNotifications: {\n    ANNOUNCEMENT: 'ANNOUNCEMENT',\n    BOLD_TEXT_STATUS_CHANGED: 'BOLD_TEXT_STATUS_CHANGED',\n    CLOSED_CAPTIONING_STATUS_CHANGED: 'CLOSED_CAPTIONING_STATUS_CHANGED',\n    DARKER_SYSTEM_COLORS_STATUS_CHANGED: 'DARKER_SYSTEM_COLORS_STATUS_CHANGED',\n    GRAYSCALE_STATUS_CHANGED: 'GRAYSCALE_STATUS_CHANGED',\n    GUIDED_ACCESS_STATUS_CHANGED: 'GUIDED_ACCESS_STATUS_CHANGED',\n    INVERT_COLORS_STATUS_CHANGED: 'INVERT_COLORS_STATUS_CHANGED',\n    LAYOUT_CHANGED: 'LAYOUT_CHANGED',\n    MONO_AUDIO_STATUS_CHANGED: 'MONO_AUDIO_STATUS_CHANGED',\n    PAGE_SCROLLED: 'PAGE_SCROLLED',\n    REDUCE_MOTION_STATUS_CHANGED: 'REDUCE_MOTION_STATUS_CHANGED',\n    REDUCE_TRANSPARENCY_STATUS_CHANGED: 'REDUCE_TRANSPARENCY_STATUS_CHANGED',\n    SCREEN_CHANGED: 'SCREEN_CHANGED',\n    SCREEN_READER_STATUS_CHANGED: 'SCREEN_READER_STATUS_CHANGED',\n    SPEAK_SCREEN_STATUS_CHANGED: 'SPEAK_SCREEN_STATUS_CHANGED',\n    SPEAK_SELECTION_STATUS_CHANGED: 'SPEAK_SELECTION_STATUS_CHANGED',\n    SWITCH_CONTROL_STATUS_CHANGED: 'SWITCH_CONTROL_STATUS_CHANGED',\n    TOUCH_EXPLORATION_STATUS_CHANGED: 'TOUCH_EXPLORATION_STATUS_CHANGED'\n  };\n\n  /**\n   * Makes an asynchronous call to native MobileAccessibility to determine if a screen reader is running.\n   * @returns {Promise<boolean>}  A result method to receive the boolean result asynchronously from the native MobileAccessibility plugin.\n   */\n  @Cordova()\n  isScreenReaderRunning(): Promise<boolean> { return; }\n\n  /**\n   * An iOS-specific proxy for the MobileAccessibility.isScreenReaderRunning method\n   * @returns {Promise<boolean>} A result method to receive the boolean result asynchronously from the native MobileAccessibility plugin.\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isVoiceOverRunning(): Promise<boolean> { return; }\n\n  /**\n   * An Android/Amazon Fire OS-specific proxy for the MobileAccessibility.isScreenReaderRunning method.\n   * @returns {Promise<boolean>}  A result method to receive the boolean result asynchronously from the native MobileAccessibility plugin.\n   */\n  @Cordova({ platforms: ['Amazon Fire OS', 'Android'] })\n  isTalkBackRunning(): Promise<boolean> { return; }\n\n  /**\n   * On Android, this method returns true if ChromeVox is active and properly initialized with access to the text to speech API in the WebView.\n   * If TalkBack is running but ChromeVox is not active, this method is useful to alert the user of a potential problem.\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['Amazon Fire OS', 'Android'] })\n  isChromeVoxActive(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isBoldTextEnabled(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova()\n  isClosedCaptioningEnabled(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isDarkerSystemColorsEnabled(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isGrayscaleEnabled(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isGuidedAccessEnabled(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isInvertColorsEnabled(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isMonoAudioEnabled(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isReduceMotionEnabled(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isReduceTransparencyEnabled(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isSpeakScreenEnabled(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isSpeakSelectionEnabled(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isSwitchControlRunning(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['Amazon Fire OS', 'Android'] })\n  isTouchExplorationEnabled(): Promise<boolean> { return; }\n\n  /**\n   *\n   * * @returns {Promise<number>} Returns the result\n   */\n  @Cordova()\n  getTextZoom(): Promise<number> { return; }\n\n  /**\n   * @param textZoom {number} A percentage value by which text in the WebView should be scaled.\n   */\n  @Cordova({ sync: true })\n  setTextZoom(textZoom: number): void { }\n\n  /**\n   *\n   */\n  @Cordova({ sync: true })\n  updateTextZoom(): void { }\n\n  /**\n   * A Boolean value which specifies whether to use the preferred text zoom of a default percent value of 100.\n   * @param value {boolean} Returns the result\n   */\n  @Cordova({ sync: true })\n  usePreferredTextZoom(value: boolean): void { }\n\n  /**\n   * Posts a notification with a string for the screen reader to announce if it is running.\n   * @param mobileAccessibilityNotification {any}\n   * @param value {string} A string to be announced by a screen reader.\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  postNotification(mobileAccessibilityNotification: any, value: string): Promise<boolean> { return; }\n\n  /**\n   * Speaks a given string through the screenreader. On Android, if ChromeVox is active, it will use the specified queueMode and properties.\n   * @param value {string}\n   * @param queueMode {mumber}\n   * @param properties {any}\n   */\n  @Cordova({ sync: true })\n  speak(value: string, queueMode?: number, properties?: any): void { }\n\n  /**\n   * Stops speech.\n   */\n  @Cordova({ sync: true })\n  stop(): void { }\n\n}\n"]}